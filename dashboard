#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed May 25 14:07:56 2022

@author: natdeacon
"""

####################
#import packages and data
####################
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.io as pio
import dash as ds
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

pio.renderers.default='browser'


states = pd.read_csv("states.csv")
employment = pd.read_csv("employmentClean.csv")
employer = pd.read_csv("employerClean.csv")

####################
#inputs
####################
schoolinput = ['YALE UNIVERSITY', 'GEORGETOWN UNIVERSITY']
yearinputs = [2012, 2013, 2014, 2015,2016, 2017, 2018, 2019, 2020, 2021, 2022]
terminputs = ["longterm", "shortterm", "unemployed", "gradSchool"]
timeinputs = ["fulltime", "parttime", "unemployed", "gradSchool"]

####################
#charts
####################

#states Plots
states["State"] = states["State"].str.replace("Of", "of")
statePlotData = states[(states.SchoolName.isin(schoolinput)) & (states.Year.isin(yearinputs))].copy()
statePlot = px.bar(statePlotData, x='Year', 
                   y='number_grads', 
                   color = 'State', 
                   title = "Top three states by employment location")


#employment plot
employmentPlotData = employment[(employment.SchoolName.isin(schoolinput)) & 
                                (employment.time.isin(timeinputs))].copy()

employmentPlotData["timeTermType"] = employmentPlotData['time'] + employmentPlotData['term'] + employmentPlotData['employment_type']

employmentPlotData = employmentPlotData.groupby(['SchoolName', 'Year', 'timeTermType'], as_index = False).agg({'number_grads': 'sum'})
employmentPlotData['% of grads'] = round(100 * employmentPlotData['number_grads']/
        employmentPlotData.groupby(['SchoolName','Year'])['number_grads'].transform('sum'), 1)


#bar passage + jd
barPassData = employmentPlotData[(employmentPlotData['timeTermType'] == 'fulltimelongtermEmployed_BarPassageRequired')| 
                                 (employmentPlotData['timeTermType'] == 'fulltimelongtermEmployed_JDAdvantage') |
                                  (employmentPlotData['timeTermType'] =='gradSchoolgradSchoolEnrolledInGraduateStudies')].copy()

barPassData["timeTermType"] = barPassData["timeTermType"].str.replace("fulltimelongtermEmployed_BarPassageRequired", "Bar Passage Required")
barPassData["timeTermType"] = barPassData["timeTermType"].str.replace("fulltimelongtermEmployed_JDAdvantage", "JD Advantage")
barPassData["timeTermType"] = barPassData["timeTermType"].str.replace("gradSchoolgradSchoolEnrolledInGraduateStudies", "Graduate School")

barPassData
barPassPlot = px.area(data_frame= barPassData, x = 'Year', y = '% of grads', color= 'timeTermType',
                      title = '% of graduates with long term, full time employment in selected categories',
                      labels={
                     "Year": "graduation year",
                     "timeTermType": "employment type"
                 })

#employers plot
employerPlotData = employer[(employer.SchoolName.isin(schoolinput)) & 
                                (employer.Year.isin(yearinputs))].copy()

employerPlotData["employer"] = np.where(employerPlotData.employer_type.str.contains('Law Firm'), 'Law Firm', employerPlotData["employer_type"])
employerPlotData["employer"] = np.where(employerPlotData.employer.str.contains('Clerkship'), 'Clerkship', employerPlotData["employer"])


employerPlotData = employerPlotData.groupby(['SchoolName', 'Year', 'employer'], as_index = False).agg({'number_grads': 'sum'})


employerPlotData['% of grads'] = round(100*employerPlotData['number_grads']/employerPlotData.groupby(['SchoolName','Year'])['number_grads'].transform('sum'), 1)
employer_comparison = px.bar(employerPlotData,
              x='Year', y='% of grads', color = 'employer',
              title = 'Employer graduates breakdown, 10 months post-graduation',
              labels={
             "Year": "graduation year"
         })

#federal clerkships & BL plot
clerkBL = employer[(employer.SchoolName.isin(schoolinput)) & 
                                (employer.Year.isin(yearinputs))].copy()

clerkBL = clerkBL.groupby(['SchoolName', 'Year', 'employer_type'], as_index = False).agg({'number_grads': 'sum'})
clerkBL['% of grads'] = round(100 * clerkBL['number_grads']/
        clerkBL.groupby(['SchoolName','Year'])['number_grads'].transform('sum'), 1)

clerkBL = clerkBL[(clerkBL["employer_type"] == 'Law Firm 500+') |
                  (clerkBL["employer_type"] == 'ClerkshipsFederal')|
                  (clerkBL["employer_type"] == 'Law Firm 251-500')]

clerkBLplot = px.line(clerkBL, x = 'Year', y = '% of grads', color = 'employer_type',
                      title = "% employed of graduates working for selected employers",
                      labels={
                     "Year": "graduation year"
                 })

####################
#dashboard
####################

# Setup the style from the link:
external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']# Embed the style to the dashabord:
app = ds.Dash(__name__, external_stylesheets=external_stylesheets)
graph1 = dcc.Graph(
        id='graph1',
        figure= employer_comparison,
        className="six columns" 
    )
graph2 = dcc.Graph(
        id='graph2',
        figure=barPassPlot,
        className="six columns"
    )
graph3 = dcc.Graph(
        id='graph3',
        figure= statePlot,
        className="six columns"
    )
graph4 = dcc.Graph(
        id='graph4',
        figure=clerkBLplot,
        className="six columns"
    )
schoolFilter = dcc.Dropdown(
            options=[
            {'label':i, 'value':i} for i in employment['SchoolName'].unique()
        ],
            id = 'school_dropdown'
        )

# setup the header
header = html.H2(children="ABA Law School Employment Data Dashboard")
row1 = html.Div(children = schoolFilter)
row2 = html.Div(children=[graph1, graph2])
row3 = html.Div(children=[graph3, graph4])# setup & apply the layout
layout = html.Div(children=[header, row1, row2, row3], style={"text-align": "center"})
app.layout = layout

if __name__ == "__main__":
    app.run_server()
    
print("hi")

=

