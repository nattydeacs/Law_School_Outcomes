#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu May 26 09:24:39 2022

@author: natdeacon
"""

####################
#import packages and data
####################
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']# Embed the style to the dashabord:
app = dash.Dash(__name__, external_stylesheets=external_stylesheets)

####################################
#data import and prep
####################################

#state chart data
states = pd.read_csv("states.csv")
states["State"] = states["State"].str.replace("Of", "of")
schools= states['SchoolName'].to_list().copy()


#employer charts data
employer = pd.read_csv("employerClean.csv")

clerkBL = employer.copy()

clerkBL = clerkBL.groupby(['SchoolName', 'Year', 'employer_type'], as_index = False).agg({'number_grads': 'sum'})
clerkBL['% of grads'] = round(100 * clerkBL['number_grads']/
        clerkBL.groupby(['SchoolName','Year'])['number_grads'].transform('sum'), 1)

clerkBL = clerkBL[(clerkBL["employer_type"] == 'Law Firm 500+') |
                  (clerkBL["employer_type"] == 'ClerkshipsFederal')|
                  (clerkBL["employer_type"] == 'Law Firm 251-500')]



employer["employer"] = np.where(employer.employer_type.str.contains('Law Firm'), 'Law Firm', employer["employer_type"])
employer["employer"] = np.where(employer.employer.str.contains('Clerkship'), 'Clerkship', employer["employer"])
employer = employer.groupby(['SchoolName', 'Year', 'employer'], as_index = False).agg({'number_grads': 'sum'})
employer['% of grads'] = round(100*employer['number_grads']/employer.groupby(['SchoolName','Year'])['number_grads'].transform('sum'), 1)

#employment charts data

employment = pd.read_csv("employmentClean.csv")

employment["timeTermType"] = employment['time'] + employment['term'] + employment['employment_type']

employment = employment.groupby(['SchoolName', 'Year', 'timeTermType'], as_index = False).agg({'number_grads': 'sum'})
employment['% of grads'] = round(100 * employment['number_grads']/
        employment.groupby(['SchoolName','Year'])['number_grads'].transform('sum'), 1)

barPassData = employment[(employment['timeTermType'] == 'fulltimelongtermEmployed_BarPassageRequired')| 
                         (employment['timeTermType'] == 'fulltimelongtermEmployed_JDAdvantage') |
                         (employment['timeTermType'] =='gradSchoolgradSchoolEnrolledInGraduateStudies')].copy()

barPassData["timeTermType"] = barPassData["timeTermType"].str.replace("fulltimelongtermEmployed_BarPassageRequired", "Bar Passage Required")
barPassData["timeTermType"] = barPassData["timeTermType"].str.replace("fulltimelongtermEmployed_JDAdvantage", "JD Advantage")
barPassData["timeTermType"] = barPassData["timeTermType"].str.replace("gradSchoolgradSchoolEnrolledInGraduateStudies", "Graduate School")



####################################
#dashboard
####################################

#create html objects
schoolFilter = dcc.Dropdown( id = 'dropdown',
         options = schools,
         value = 'GEORGETOWN UNIVERSITY')

bottomright = dcc.Graph(
        id='state_plot',
        figure = 'state_plot',
        className="five columns" 
    )
topright = dcc.Graph(
        id='employer_comparison_plot',
        figure = 'employer_comparison_plot',
        className="five columns" 
    )

topleft = dcc.Graph(
        id='employment_plot',
        figure = 'employment_plot',
        className="seven columns" 
    )

bottomleft = dcc.Graph(
        id='ClerkBL_plot',
        figure = 'ClerkBL_plot',
        className="seven columns" 
    )


header = html.H2(children="ABA Law School Employment Data Dashboard (Beta)", style={'font-size': '28px'})
footer = html.H2(children="Disclaimer: I created this dashboard in my free time and it has not yet undergone extensive QA checks. Please reach out to me at natdeacon@gmail.com if you experience any issues. ", style={'font-size': '16px'})


linktoaba = html.Div([
    html.A("ABA survey information", href='https://www.abarequireddisclosures.org/employmentoutcomes.aspx', target="_blank")
])

linktorepo = html.Div([
    html.A("Dashboard source data and code", href='https://github.com/nattydeacs/Law_School_Outcomes', target="_blank")
])

row1 = html.Div(children = schoolFilter)
row2 = html.Div(children=[topleft, topright])
row3 = html.Div(children=[bottomleft, bottomright])
layout = html.Div(children=[header,linktoaba, linktorepo,  row1, row2, row3, footer], style={"text-align": "left"})
app.layout = layout
    
@app.callback(Output(component_id='state_plot', component_property= 'figure'),
              [Input(component_id='dropdown', component_property= 'value')])
def states_graph_update(dropdown_value):
    print(dropdown_value)
    statePlotData = states[states['SchoolName'] == dropdown_value].copy()
    fig = px.bar(statePlotData, x = 'Year', y = 'number_grads', color = 'State',
                 color_discrete_sequence=px.colors.qualitative.G10,
                 template="simple_white")
    fig.update_layout(title = 'Top three states',
                      xaxis_title = 'year of graduation',
                      yaxis_title = '# of graduates employed in state'
                      )
    return fig  

@app.callback(Output(component_id='employer_comparison_plot', component_property= 'figure'),
              [Input(component_id='dropdown', component_property= 'value')])

def employer_graph_update(dropdown_value):
    print(dropdown_value)
    employerPlotData = employer[employer['SchoolName'] == dropdown_value].copy()
    fig = px.bar(employerPlotData, x = 'Year', y = '% of grads', color = 'employer',
                 color_discrete_sequence=px.colors.qualitative.G10,
                 template="simple_white")
    fig.update_layout(title = 'Top employers',
                      xaxis_title = 'year of graduation',
                      yaxis_title = '% of employed graduates at employer type'
                      )
    return fig  

@app.callback(Output(component_id='ClerkBL_plot', component_property= 'figure'),
              [Input(component_id='dropdown', component_property= 'value')])

def clerkBL_graph_update(dropdown_value):
    print(dropdown_value)
    clerkBLPlotData = clerkBL[clerkBL['SchoolName'] == dropdown_value].copy()
    fig = px.line(clerkBLPlotData, x = 'Year', y = '% of grads', color = 'employer_type',
                          title = "% employed of graduates working for selected employers (fulltime,longterm)",
                          color_discrete_sequence=px.colors.qualitative.G10,
                          template="simple_white")
    fig.update_layout(
                      xaxis_title = 'year of graduation',
                      yaxis_title = '% of employed graduates at employer type'
                      )
    return fig 

@app.callback(Output(component_id='employment_plot', component_property= 'figure'),
              [Input(component_id='dropdown', component_property= 'value')])
    
def employment_graph_update(dropdown_value):
    print(dropdown_value)
    barPassPlotData = barPassData[barPassData['SchoolName'] == dropdown_value].copy()
    fig = px.area(data_frame= barPassPlotData, x = 'Year', y = '% of grads', color= 'timeTermType',
                            title = '% of graduates with long term, full time employment in selected categories',
                            color_discrete_sequence=px.colors.qualitative.G10,
                            template="simple_white", 
                            labels={
                           "Year": "graduation year",
                           "timeTermType": "employment type"
                       })
    return fig 




if __name__ == '__main__': 
    app.run_server()
    
