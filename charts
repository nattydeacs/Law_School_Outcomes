#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed May 25 09:52:42 2022

@author: natdeacon
"""



####################
#import packages and data
####################
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.io as pio
pio.renderers.default='browser'


states = pd.read_csv("states.csv")
employment = pd.read_csv("employmentClean.csv")
employer = pd.read_csv("employerClean.csv")

####################
#inputs
####################
schoolinput = ['YALE UNIVERSITY']
yearinputs = [2012, 2013, 2014, 2015,2016, 2017, 2018, 2019, 2020, 2021, 2022]
terminputs = ["longterm", "shortterm", "unemployed", "gradSchool"]
timeinputs = ["fulltime", "parttime", "unemployed", "gradSchool"]

####################
#geo plot
####################

#data
states["State"] = states["State"].str.replace("Of", "of")
statePlotData = states[(states.SchoolName.isin(schoolinput)) & (states.Year.isin(yearinputs))].copy()

#plots
statePlot = px.bar(statePlotData, x='Year', 
                   y='number_grads', 
                   color = 'State', 
                   title = "Top three states by employment location, 10 months post-graduation")

statePlot.show()

####################
#employment plot
####################

employmentPlotData = employment[(employment.SchoolName.isin(schoolinput)) & 
                                (employment.time.isin(timeinputs))].copy()

employmentPlotData["timeTermType"] = employmentPlotData['time'] + employmentPlotData['term'] + employmentPlotData['employment_type']

employmentPlotData = employmentPlotData.groupby(['SchoolName', 'Year', 'timeTermType'], as_index = False).agg({'number_grads': 'sum'})
employmentPlotData['% of grads'] = round(100 * employmentPlotData['number_grads']/
        employmentPlotData.groupby(['SchoolName','Year'])['number_grads'].transform('sum'), 1)


#bar passage + jd
barPassData = employmentPlotData[(employmentPlotData['timeTermType'] == 'fulltimelongtermEmployed_BarPassageRequired')| 
                                 (employmentPlotData['timeTermType'] == 'fulltimelongtermEmployed_JDAdvantage') |
                                  (employmentPlotData['timeTermType'] =='gradSchoolgradSchoolEnrolledInGraduateStudies')].copy()

barPassData["timeTermType"] = barPassData["timeTermType"].str.replace("fulltimelongtermEmployed_BarPassageRequired", "Bar Passage Required")
barPassData["timeTermType"] = barPassData["timeTermType"].str.replace("fulltimelongtermEmployed_JDAdvantage", "JD Advantage")
barPassData["timeTermType"] = barPassData["timeTermType"].str.replace("gradSchoolgradSchoolEnrolledInGraduateStudies", "Graduate School")

barPassData
barPassPlot = px.area(data_frame= barPassData, x = 'Year', y = '% of grads', color= 'timeTermType',
                      title = '% of graduates with long term, full time employment requiring bar passage or with JD advantage, or in graduate school, 10 months post-graduation',
                      labels={
                     "Year": "graduation year",
                     "timeTermType": "employment type"
                 })

barPassPlot.show()


####################
#employers plot
####################

employerPlotData = employer[(employer.SchoolName.isin(schoolinput)) & 
                                (employer.Year.isin(yearinputs))].copy()

employerPlotData["employer"] = np.where(employerPlotData.employer_type.str.contains('Law Firm'), 'Law Firm', employerPlotData["employer_type"])
employerPlotData["employer"] = np.where(employerPlotData.employer.str.contains('Clerkship'), 'Clerkship', employerPlotData["employer"])


employerPlotData = employerPlotData.groupby(['SchoolName', 'Year', 'employer'], as_index = False).agg({'number_grads': 'sum'})


employerPlotData['% of grads'] = round(100*employerPlotData['number_grads']/employerPlotData.groupby(['SchoolName','Year'])['number_grads'].transform('sum'), 1)
employer_comparison = px.bar(employerPlotData,
              x='Year', y='% of grads', color = 'employer',
              color_discrete_sequence=px.colors.qualitative.G10,
              template="simple_white", 
              title = 'Employer graduates breakdown, 10 months post-graduation',
              labels={
             "Year": "graduation year"
         })
employer_comparison



####################
#federal clerkships & BL plot
####################


clerkBL = employer[(employer.SchoolName.isin(schoolinput)) & 
                                (employer.Year.isin(yearinputs))].copy()

clerkBL = clerkBL.groupby(['SchoolName', 'Year', 'employer_type'], as_index = False).agg({'number_grads': 'sum'})
clerkBL['% of grads'] = round(100 * clerkBL['number_grads']/
        clerkBL.groupby(['SchoolName','Year'])['number_grads'].transform('sum'), 1)

clerkBL = clerkBL[(clerkBL["employer_type"] == 'Law Firm 500+') |
                  (clerkBL["employer_type"] == 'ClerkshipsFederal')|
                  (clerkBL["employer_type"] == 'Law Firm 251-500')]

clerkBLplot = px.line(clerkBL, x = 'Year', y = '% of grads', color = 'employer_type',
                      title = "% of graduates working in 'Big Law' or Federal Clerkships, 10 months post-graduation",
                      color_discrete_sequence=px.colors.qualitative.G10,
                      labels={
                     "Year": "graduation year"
                 })
clerkBLplot.show()



